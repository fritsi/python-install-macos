From 3d40ed9536d0fb4643dc27f311edfeb8efdd562b Mon Sep 17 00:00:00 2001
From: fvogel <fvogelnew1@free.fr>
Date: Thu, 8 Jun 2023 06:06:44 +0000
Subject: [PATCH] This is a combination of 8 leakage fix commits:

Fix [57844100da]: Aqua: fix leak in TkScrollWindow(). Patch from Christopher Chavez.

(cherry picked from commit a317fda01fd9df46754fab6ca3c9207931dc0979)

Fix [a526d42999]: Aqua: leak in TkpOpenDisplay(). Patch from Christopher Chavez.

(cherry picked from commit d6c477519867f05c985cc5083ab0ad77ea69e453)

Fix [fa4694dcd0]: Aqua: fix TKNSString leak in TkpConfigureMenuEntry(). Patch from Christopher Chavez.

(cherry picked from commit 997c868058a5c4fab53490ae1303387800f8d289)

Fix [0502c1eef5]: Aqua: fix NSAttributedString leak in TkpConfigureMenuEntry(). Patch from Christopher Chavez.

(cherry picked from commit c4face7a6db13dc6607f81f9cbc868568f1fd964)

Fix [2cb602807b]: leak in tkMacOSXRegion.c. Patch from Christopher Chavez.

(cherry picked from commit 087d9ce83ba3cc14cbc3028eb7290510482fca0f)

Fix [edb769628e]: Aqua: leak in XGetImage(). Patch from Christopher Chavez.

(cherry picked from commit 111379aa313dcebc58385b6e7da71a3f49274f10)

Fix [c35c3419ea]: leak in Initialize() when -name not provided. Patch from Christopher Chavez.

(cherry picked from commit 071b0348c412d60e937447c5c1cd4011cb9381b5)

Fix [deca949d0d]: tkUnixWm.c: leak in TkpMakeMenuWindow(). Patch from CHristopher Chavez.

(cherry picked from commit 7692f8f7d7ab8190cc54d04d083f0ac966f41c48)
---
 generic/tkWindow.c      |  7 +++++++
 macosx/tkMacOSXColor.c  | 10 +++++-----
 macosx/tkMacOSXDraw.c   |  6 ++----
 macosx/tkMacOSXImage.c  |  2 +-
 macosx/tkMacOSXMenu.c   |  6 ++++--
 macosx/tkMacOSXRegion.c |  4 ++--
 macosx/tkMacOSXXStubs.c |  2 +-
 unix/tkUnixWm.c         |  2 ++
 8 files changed, 24 insertions(+), 15 deletions(-)

diff --git a/generic/tkWindow.c b/generic/tkWindow.c
index 59c12433d..9ab59a3c1 100644
--- a/generic/tkWindow.c
+++ b/generic/tkWindow.c
@@ -3130,6 +3130,7 @@ Initialize(
     Tcl_Obj *cmd;
 
     Tcl_Obj *nameObj = NULL;
+    Tcl_Obj* appNameObj = NULL;
     Tcl_Obj *classObj = NULL;
     Tcl_Obj *displayObj = NULL;
     Tcl_Obj *colorMapObj = NULL;
@@ -3295,6 +3296,8 @@ Initialize(
 	TkpGetAppName(interp, &nameDS);
 	nameObj = Tcl_NewStringObj(Tcl_DStringValue(&nameDS),
 		Tcl_DStringLength(&nameDS));
+	appNameObj = nameObj;
+	Tcl_IncrRefCount(appNameObj);
 	Tcl_DStringFree(&nameDS);
     }
 
@@ -3456,6 +3459,10 @@ tkInit", -1, TCL_EVAL_GLOBAL);
 	Tcl_DecrRefCount(value);
 	value = NULL;
     }
+    if (appNameObj) {
+	Tcl_DecrRefCount(appNameObj);
+	appNameObj = NULL;
+    }
     return code;
 }
 
diff --git a/macosx/tkMacOSXColor.c b/macosx/tkMacOSXColor.c
index 2037dfbdf..44beca0a9 100644
--- a/macosx/tkMacOSXColor.c
+++ b/macosx/tkMacOSXColor.c
@@ -409,6 +409,11 @@ SetCGColorComponents(
 {
     CGFloat rgba[4] = {0, 0, 0, 1};
 
+    if (entry->type == HIBrush) {
+     	OSStatus err = ChkErr(HIThemeBrushCreateCGColor, entry->value, c);
+     	return err == noErr;
+    }
+
     /*
      * This function is called before our autorelease pool is set up,
      * so it needs its own pool.
@@ -416,11 +421,6 @@ SetCGColorComponents(
 
     NSAutoreleasePool *pool = [NSAutoreleasePool new];
 
-    if (entry->type == HIBrush) {
-     	OSStatus err = ChkErr(HIThemeBrushCreateCGColor, entry->value, c);
-	[pool drain];
-     	return err == noErr;
-    }
     GetRGBA(entry, pixel, rgba);
     *c = CGColorCreate(sRGB.CGColorSpace, rgba);
     [pool drain];
diff --git a/macosx/tkMacOSXDraw.c b/macosx/tkMacOSXDraw.c
index 874d3cc57..48e46acd6 100644
--- a/macosx/tkMacOSXDraw.c
+++ b/macosx/tkMacOSXDraw.c
@@ -1175,6 +1175,8 @@ TkScrollWindow(
 	srcRgn = HIShapeCreateWithRect(&srcRect);
 	dstRgn = HIShapeCreateWithRect(&dstRect);
 	ChkErr(HIShapeDifference, srcRgn, dstRgn, dmgRgn);
+	CFRelease(dstRgn);
+	CFRelease(srcRgn);
 	result = HIShapeIsEmpty(dmgRgn) ? 0 : 1;
 
     }
@@ -1185,10 +1187,6 @@ TkScrollWindow(
 
     TkMacOSXSetWithNativeRegion(damageRgn, dmgRgn);
 
-    /*
-     * Mutable shapes are not reference counted, and must be released.
-     */
-
     CFRelease(dmgRgn);
     return result;
 }
diff --git a/macosx/tkMacOSXImage.c b/macosx/tkMacOSXImage.c
index fc0ffdf42..3f2af96a8 100644
--- a/macosx/tkMacOSXImage.c
+++ b/macosx/tkMacOSXImage.c
@@ -775,7 +775,6 @@ XGetImage(
 	bitmap_fmt = [bitmapRep bitmapFormat];
 	size = [bitmapRep bytesPerPlane];
 	bytes_per_row = [bitmapRep bytesPerRow];
-	bitmap = (char *)ckalloc(size);
 	if ((bitmap_fmt != 0 && bitmap_fmt != NSAlphaFirstBitmapFormat)
 	    || [bitmapRep samplesPerPixel] != 4
 	    || [bitmapRep isPlanar] != 0
@@ -785,6 +784,7 @@ XGetImage(
 	    [bitmapRep release];
 	    return NULL;
 	}
+	bitmap = (char *)ckalloc(size);
 	memcpy(bitmap, (char *)[bitmapRep bitmapData], size);
 	[bitmapRep release];
 
diff --git a/macosx/tkMacOSXMenu.c b/macosx/tkMacOSXMenu.c
index c10944ae7..ab3b68cd4 100644
--- a/macosx/tkMacOSXMenu.c
+++ b/macosx/tkMacOSXMenu.c
@@ -757,9 +757,10 @@ TkpConfigureMenuEntry(
     [menuItem setImage:image];
     if ((!image || mePtr->compound != COMPOUND_NONE) && mePtr->labelPtr &&
 	    mePtr->labelLength) {
-	title = [[TKNSString alloc]
+	title = [[[TKNSString alloc]
 		    initWithTclUtfBytes:Tcl_GetString(mePtr->labelPtr)
-				length:mePtr->labelLength];
+				length:mePtr->labelLength]
+		autorelease];
 	if ([title hasSuffix:@"..."]) {
 	    title = [NSString stringWithFormat:@"%@%C",
 		    [title substringToIndex:[title length] - 3], 0x2026];
@@ -809,6 +810,7 @@ TkpConfigureMenuEntry(
     attributedTitle = [[NSAttributedString alloc] initWithString:title
 	attributes:attributes];
     [menuItem setAttributedTitle:attributedTitle];
+    [attributedTitle release];
     [menuItem setEnabled:(mePtr->state != ENTRY_DISABLED)];
     [menuItem setState:((mePtr->type == CHECK_BUTTON_ENTRY ||
 	    mePtr->type == RADIO_BUTTON_ENTRY) && mePtr->indicatorOn &&
diff --git a/macosx/tkMacOSXRegion.c b/macosx/tkMacOSXRegion.c
index fbb41cb95..04973ca5f 100644
--- a/macosx/tkMacOSXRegion.c
+++ b/macosx/tkMacOSXRegion.c
@@ -45,8 +45,8 @@ TkRegion
 TkCreateRegion(void)
 {
     TkRegion region = (TkRegion) HIShapeCreateMutable();
-    DebugLog("Created region: total regions = %d\n", ++totalRegions);
-    RetainRegion(region);
+    DebugLog("Created region: total regions = %d, total count is %d\n",
+	++totalRegions, ++totalRegionRetainCount);
     return region;
 }
 
diff --git a/macosx/tkMacOSXXStubs.c b/macosx/tkMacOSXXStubs.c
index a860bda9b..a86d58b7c 100644
--- a/macosx/tkMacOSXXStubs.c
+++ b/macosx/tkMacOSXXStubs.c
@@ -191,7 +191,6 @@ TkpOpenDisplay(
     static NSRect maxBounds = {{0, 0}, {0, 0}};
     static char vendor[25] = "";
     NSArray *cgVers;
-    NSAutoreleasePool *pool = [NSAutoreleasePool new];
 
     if (gMacDisplay != NULL) {
 	if (strcmp(gMacDisplay->display->display_name, display_name) == 0) {
@@ -201,6 +200,7 @@ TkpOpenDisplay(
 	}
     }
 
+    NSAutoreleasePool *pool = [NSAutoreleasePool new];
     display = (Display *)ckalloc(sizeof(Display));
     screen = (Screen *)ckalloc(sizeof(Screen));
     bzero(display, sizeof(Display));
diff --git a/unix/tkUnixWm.c b/unix/tkUnixWm.c
index 833009860..e14d23295 100644
--- a/unix/tkUnixWm.c
+++ b/unix/tkUnixWm.c
@@ -6949,7 +6949,9 @@ TkpMakeMenuWindow(
 	    typeObj = Tcl_NewStringObj("popup_menu", -1);
 	}
     }
+    Tcl_IncrRefCount(typeObj);
     SetNetWmType((TkWindow *)tkwin, typeObj);
+    Tcl_DecrRefCount(typeObj);
 
     /*
      * The override-redirect and save-under bits must be set on the wrapper
-- 
2.41.0
