From 3b4afb8c9a618ec1218a7de559b3ac9b4f00a0da Mon Sep 17 00:00:00 2001
From: Daniel Fritsi <ffddani@gmail.com>
Date: Tue, 20 Dec 2022 16:16:24 +0100
Subject: [PATCH] Python 3.10.9 patching

---
 Lib/distutils/tests/test_build_ext.py |  6 ++++++
 Lib/test/support/__init__.py          | 27 +++++++++++++++--------
 Lib/test/test_gdb.py                  |  2 +-
 Lib/test/test_posix.py                |  8 +++----
 Modules/Setup                         | 31 +++++++++++++++++----------
 Modules/getaddrinfo.c                 |  1 +
 Modules/getnameinfo.c                 |  1 +
 Modules/socketmodule.c                |  1 +
 Modules/socketmodule.h                |  1 +
 9 files changed, 53 insertions(+), 25 deletions(-)

diff --git a/Lib/distutils/tests/test_build_ext.py b/Lib/distutils/tests/test_build_ext.py
index 8e7364d..4916642 100644
--- a/Lib/distutils/tests/test_build_ext.py
+++ b/Lib/distutils/tests/test_build_ext.py
@@ -457,6 +457,9 @@ class BuildExtTestCase(TempdirManager,
         # deployment target higher than that of the interpreter: the ext
         # module may depend on some newer OS feature.
         deptarget = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET')
+        # Handling the case where MACOSX_DEPLOYMENT_TARGET >= 11 (Big Sur)
+        if deptarget.isdigit():
+            deptarget = f"{deptarget}.0"
         if deptarget:
             # increment the minor version number (i.e. 10.6 -> 10.7)
             deptarget = [int(x) for x in deptarget.split('.')]
@@ -492,6 +495,9 @@ class BuildExtTestCase(TempdirManager,
 
         # get the deployment target that the interpreter was built with
         target = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET')
+        # Handling the case where MACOSX_DEPLOYMENT_TARGET >= 11 (Big Sur)
+        if target.isdigit():
+            target = f"{target}.0"
         target = tuple(map(int, target.split('.')[0:2]))
         # format the target value as defined in the Apple
         # Availability Macros.  We can't use the macro names since
diff --git a/Lib/test/support/__init__.py b/Lib/test/support/__init__.py
index b7cf1e2..fdb22ff 100644
--- a/Lib/test/support/__init__.py
+++ b/Lib/test/support/__init__.py
@@ -202,8 +202,16 @@ def _force_run(path, func, *args):
 def _is_gui_available():
     if hasattr(_is_gui_available, 'result'):
         return _is_gui_available.result
+
+    if os.environ.get("UI_TESTS_ENABLED", "") != "1":
+        _is_gui_available.reason = "fritsi: UI tests are disabled, because the 'UI_TESTS_ENABLED' environment variable is not set to '1'"
+        _is_gui_available.result = False
+        return _is_gui_available.result
+
     import platform
+
     reason = None
+
     if sys.platform.startswith('win') and platform.win32_is_iot():
         reason = "gui is not available on Windows IoT Core"
     elif sys.platform.startswith('win'):
@@ -246,15 +254,15 @@ def _is_gui_available():
 
         if app_services.CGMainDisplayID() == 0:
             reason = "gui tests cannot run without OS X window manager"
-        else:
-            class ProcessSerialNumber(Structure):
-                _fields_ = [("highLongOfPSN", c_int),
-                            ("lowLongOfPSN", c_int)]
-            psn = ProcessSerialNumber()
-            psn_p = pointer(psn)
-            if (  (app_services.GetCurrentProcess(psn_p) < 0) or
-                  (app_services.SetFrontProcess(psn_p) < 0) ):
-                reason = "cannot run without OS X gui process"
+        # else:
+        #     class ProcessSerialNumber(Structure):
+        #         _fields_ = [("highLongOfPSN", c_int),
+        #                     ("lowLongOfPSN", c_int)]
+        #     psn = ProcessSerialNumber()
+        #     psn_p = pointer(psn)
+        #     if (  (app_services.GetCurrentProcess(psn_p) < 0) or
+        #           (app_services.SetFrontProcess(psn_p) < 0) ):
+        #         reason = "cannot run without OS X gui process"
 
     # check on every platform whether tkinter can actually do anything
     if not reason:
@@ -264,6 +272,7 @@ def _is_gui_available():
             root.withdraw()
             root.update()
             root.destroy()
+            root.quit()
         except Exception as e:
             err_string = str(e)
             if len(err_string) > 50:
diff --git a/Lib/test/test_gdb.py b/Lib/test/test_gdb.py
index 5f55489..b840613 100644
--- a/Lib/test/test_gdb.py
+++ b/Lib/test/test_gdb.py
@@ -137,7 +137,7 @@ HAS_PYUP_PYDOWN = gdb_has_frame_select()
 
 BREAKPOINT_FN='builtin_id'
 
-@unittest.skipIf(support.PGO, "not useful for PGO")
+@unittest.skipIf(True, "fritsi: gdb requires code signing on MacOS")
 class DebuggerTests(unittest.TestCase):
 
     """Test that the debugger can debug Python."""
diff --git a/Lib/test/test_posix.py b/Lib/test/test_posix.py
index 19bc885..43d4ec0 100644
--- a/Lib/test/test_posix.py
+++ b/Lib/test/test_posix.py
@@ -1057,7 +1057,7 @@ class PosixTester(unittest.TestCase):
     @unittest.skipUnless(hasattr(os, 'getegid'), "test needs os.getegid()")
     @unittest.skipUnless(hasattr(os, 'popen'), "test needs os.popen()")
     def test_getgroups(self):
-        with os.popen('id -G 2>/dev/null') as idg:
+        with os.popen('/usr/bin/id -G 2>/dev/null') as idg:
             groups = idg.read().strip()
             ret = idg.close()
 
@@ -1065,8 +1065,8 @@ class PosixTester(unittest.TestCase):
             idg_groups = set(int(g) for g in groups.split())
         except ValueError:
             idg_groups = set()
-        if ret is not None or not idg_groups:
-            raise unittest.SkipTest("need working 'id -G'")
+        self.assertTrue(ret is None and idg_groups,
+                        "need working '/usr/bin/id -G'")
 
         # Issues 16698: OS X ABIs prior to 10.6 have limits on getgroups()
         if sys.platform == 'darwin':
@@ -1075,7 +1075,7 @@ class PosixTester(unittest.TestCase):
             if tuple(int(n) for n in dt.split('.')[0:2]) < (10, 6):
                 raise unittest.SkipTest("getgroups(2) is broken prior to 10.6")
 
-        # 'id -G' and 'os.getgroups()' should return the same
+        # '/usr/bin/id -G' and 'os.getgroups()' should return the same
         # groups, ignoring order, duplicates, and the effective gid.
         # #10822/#26944 - It is implementation defined whether
         # posix.getgroups() includes the effective gid.
diff --git a/Modules/Setup b/Modules/Setup
index 87c6a15..2daa5c5 100644
--- a/Modules/Setup
+++ b/Modules/Setup
@@ -161,7 +161,10 @@ _symtable symtablemodule.c
 # it, depending on your system -- see the GNU readline instructions.
 # It's okay for this to be a shared library, too.
 
-#readline readline.c -lreadline -ltermcap
+readline readline.c \
+    -I__readline_install_dir__/include \
+    -L__readline_install_dir__/lib \
+    -lreadline -ltermcap
 
 
 # Modules that should always be present (non UNIX dependent):
@@ -204,17 +207,17 @@ _symtable symtablemodule.c
 #_csv _csv.c
 
 # Socket module helper for socket(2)
-#_socket socketmodule.c
+_socket socketmodule.c
 
 # Socket module helper for SSL support; you must comment out the other
 # socket line above, and edit the OPENSSL variable:
-# OPENSSL=/path/to/openssl/directory
-# _ssl _ssl.c \
-#     -I$(OPENSSL)/include -L$(OPENSSL)/lib \
-#     -lssl -lcrypto
-#_hashlib _hashopenssl.c \
-#     -I$(OPENSSL)/include -L$(OPENSSL)/lib \
-#     -lcrypto
+OPENSSL=__openssl_install_dir__
+_ssl _ssl.c \
+    -I$(OPENSSL)/include -L$(OPENSSL)/lib \
+    -lssl -lcrypto
+_hashlib _hashopenssl.c \
+    -I$(OPENSSL)/include -L$(OPENSSL)/lib \
+    -lcrypto
 
 # To statically link OpenSSL:
 # _ssl _ssl.c \
@@ -279,7 +282,10 @@ _symtable symtablemodule.c
 # every system.
 
 # *** Always uncomment this (leave the leading underscore in!):
-# _tkinter _tkinter.c tkappinit.c -DWITH_APPINIT \
+_tkinter _tkinter.c tkappinit.c -DWITH_APPINIT \
+    -L__tcl_tk_install_dir__/lib \
+    -I__tcl_tk_install_dir__/include \
+    -ltk8.6 -ltcl8.6
 # *** Uncomment and edit to reflect where your Tcl/Tk libraries are:
 #	-L/usr/local/lib \
 # *** Uncomment and edit to reflect where your Tcl/Tk headers are:
@@ -343,7 +349,10 @@ _symtable symtablemodule.c
 # Andrew Kuchling's zlib module.
 # This require zlib 1.1.3 (or later).
 # See http://www.gzip.org/zlib/
-#zlib zlibmodule.c -I$(prefix)/include -L$(exec_prefix)/lib -lz
+zlib zlibmodule.c \
+    -I__zlib_install_dir__/include \
+    -L__zlib_install_dir__/lib \
+    -lz
 
 # Interface to the Expat XML parser
 # More information on Expat can be found at www.libexpat.org.
diff --git a/Modules/getaddrinfo.c b/Modules/getaddrinfo.c
index 5aaa6e7..5291c97 100644
--- a/Modules/getaddrinfo.c
+++ b/Modules/getaddrinfo.c
@@ -43,6 +43,7 @@
 #include <sys/param.h>
 #include <sys/sysctl.h>
 #include <sys/socket.h>
+#define __APPLE_USE_RFC_3542 1
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <arpa/nameser.h>
diff --git a/Modules/getnameinfo.c b/Modules/getnameinfo.c
index db3e8ee..1924c64 100644
--- a/Modules/getnameinfo.c
+++ b/Modules/getnameinfo.c
@@ -37,6 +37,7 @@
 #if 0
 #include <sys/types.h>
 #include <sys/socket.h>
+#define __APPLE_USE_RFC_3542 1
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <arpa/nameser.h>
diff --git a/Modules/socketmodule.c b/Modules/socketmodule.c
index 6a9ac2c..60825a4 100644
--- a/Modules/socketmodule.c
+++ b/Modules/socketmodule.c
@@ -212,6 +212,7 @@ shutdown(how) -- shut down traffic in one or both directions\n\
 #undef _XOPEN_SOURCE
 #include <sys/socket.h>
 #include <sys/types.h>
+#define __APPLE_USE_RFC_3542 1
 #include <netinet/in.h>
 #ifdef _SS_ALIGNSIZE
 #define HAVE_GETADDRINFO 1
diff --git a/Modules/socketmodule.h b/Modules/socketmodule.h
index e4f375d..4f799e4 100644
--- a/Modules/socketmodule.h
+++ b/Modules/socketmodule.h
@@ -7,6 +7,7 @@
 # else
 #   include <sys/socket.h>
 # endif
+#define __APPLE_USE_RFC_3542 1
 # include <netinet/in.h>
 # if !defined(__CYGWIN__)
 #  include <netinet/tcp.h>
-- 
2.39.0

