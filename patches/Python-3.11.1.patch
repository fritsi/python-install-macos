From bda57035a937bc62dd623f7cd9afe4ce2d3d8b0e Mon Sep 17 00:00:00 2001
From: Daniel Fritsi <ffddani@gmail.com>
Date: Tue, 20 Dec 2022 16:16:44 +0100
Subject: [PATCH] Python 3.11.1 patching

---
 Lib/distutils/tests/test_build_ext.py |  6 ++
 Lib/test/support/__init__.py          | 27 ++++++---
 Lib/test/test_gdb.py                  |  2 +-
 Lib/test/test_posix.py                |  8 +--
 Makefile.pre.in                       |  7 ++-
 Modules/Setup                         | 20 +++++--
 Modules/getaddrinfo.c                 |  1 +
 Modules/getnameinfo.c                 |  1 +
 Modules/socketmodule.c                |  1 +
 Modules/socketmodule.h                |  1 +
 setup.py                              | 79 ++++++++++++++++++++++++++-
 11 files changed, 128 insertions(+), 25 deletions(-)

diff --git a/Lib/distutils/tests/test_build_ext.py b/Lib/distutils/tests/test_build_ext.py
index 4ebeafe..fa303e3 100644
--- a/Lib/distutils/tests/test_build_ext.py
+++ b/Lib/distutils/tests/test_build_ext.py
@@ -459,6 +459,9 @@ class BuildExtTestCase(TempdirManager,
         # deployment target higher than that of the interpreter: the ext
         # module may depend on some newer OS feature.
         deptarget = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET')
+        # Handling the case where MACOSX_DEPLOYMENT_TARGET >= 11 (Big Sur)
+        if deptarget.isdigit():
+            deptarget = f"{deptarget}.0"
         if deptarget:
             # increment the minor version number (i.e. 10.6 -> 10.7)
             deptarget = [int(x) for x in deptarget.split('.')]
@@ -494,6 +497,9 @@ class BuildExtTestCase(TempdirManager,
 
         # get the deployment target that the interpreter was built with
         target = sysconfig.get_config_var('MACOSX_DEPLOYMENT_TARGET')
+        # Handling the case where MACOSX_DEPLOYMENT_TARGET >= 11 (Big Sur)
+        if target.isdigit():
+            target = f"{target}.0"
         target = tuple(map(int, target.split('.')[0:2]))
         # format the target value as defined in the Apple
         # Availability Macros.  We can't use the macro names since
diff --git a/Lib/test/support/__init__.py b/Lib/test/support/__init__.py
index c33f90d..aca9c79 100644
--- a/Lib/test/support/__init__.py
+++ b/Lib/test/support/__init__.py
@@ -216,8 +216,16 @@ def _force_run(path, func, *args):
 def _is_gui_available():
     if hasattr(_is_gui_available, 'result'):
         return _is_gui_available.result
+
+    if os.environ.get("UI_TESTS_ENABLED", "") != "1":
+        _is_gui_available.reason = "fritsi: UI tests are disabled, because the 'UI_TESTS_ENABLED' environment variable is not set to '1'"
+        _is_gui_available.result = False
+        return _is_gui_available.result
+
     import platform
+
     reason = None
+
     if sys.platform.startswith('win') and platform.win32_is_iot():
         reason = "gui is not available on Windows IoT Core"
     elif sys.platform.startswith('win'):
@@ -260,15 +268,15 @@ def _is_gui_available():
 
         if app_services.CGMainDisplayID() == 0:
             reason = "gui tests cannot run without OS X window manager"
-        else:
-            class ProcessSerialNumber(Structure):
-                _fields_ = [("highLongOfPSN", c_int),
-                            ("lowLongOfPSN", c_int)]
-            psn = ProcessSerialNumber()
-            psn_p = pointer(psn)
-            if (  (app_services.GetCurrentProcess(psn_p) < 0) or
-                  (app_services.SetFrontProcess(psn_p) < 0) ):
-                reason = "cannot run without OS X gui process"
+        # else:
+        #     class ProcessSerialNumber(Structure):
+        #         _fields_ = [("highLongOfPSN", c_int),
+        #                     ("lowLongOfPSN", c_int)]
+        #     psn = ProcessSerialNumber()
+        #     psn_p = pointer(psn)
+        #     if (  (app_services.GetCurrentProcess(psn_p) < 0) or
+        #           (app_services.SetFrontProcess(psn_p) < 0) ):
+        #         reason = "cannot run without OS X gui process"
 
     # check on every platform whether tkinter can actually do anything
     if not reason:
@@ -278,6 +286,7 @@ def _is_gui_available():
             root.withdraw()
             root.update()
             root.destroy()
+            root.quit()
         except Exception as e:
             err_string = str(e)
             if len(err_string) > 50:
diff --git a/Lib/test/test_gdb.py b/Lib/test/test_gdb.py
index 0f39b8f..295bef8 100644
--- a/Lib/test/test_gdb.py
+++ b/Lib/test/test_gdb.py
@@ -140,7 +140,7 @@ HAS_PYUP_PYDOWN = gdb_has_frame_select()
 
 BREAKPOINT_FN='builtin_id'
 
-@unittest.skipIf(support.PGO, "not useful for PGO")
+@unittest.skipIf(True, "fritsi: gdb requires code signing on MacOS")
 class DebuggerTests(unittest.TestCase):
 
     """Test that the debugger can debug Python."""
diff --git a/Lib/test/test_posix.py b/Lib/test/test_posix.py
index e643d8e..b201941 100644
--- a/Lib/test/test_posix.py
+++ b/Lib/test/test_posix.py
@@ -1072,7 +1072,7 @@ class PosixTester(unittest.TestCase):
     @unittest.skipUnless(hasattr(os, 'popen'), "test needs os.popen()")
     @support.requires_subprocess()
     def test_getgroups(self):
-        with os.popen('id -G 2>/dev/null') as idg:
+        with os.popen('/usr/bin/id -G 2>/dev/null') as idg:
             groups = idg.read().strip()
             ret = idg.close()
 
@@ -1080,8 +1080,8 @@ class PosixTester(unittest.TestCase):
             idg_groups = set(int(g) for g in groups.split())
         except ValueError:
             idg_groups = set()
-        if ret is not None or not idg_groups:
-            raise unittest.SkipTest("need working 'id -G'")
+        self.assertTrue(ret is None and idg_groups,
+                        "need working '/usr/bin/id -G'")
 
         # Issues 16698: OS X ABIs prior to 10.6 have limits on getgroups()
         if sys.platform == 'darwin':
@@ -1090,7 +1090,7 @@ class PosixTester(unittest.TestCase):
             if tuple(int(n) for n in dt.split('.')[0:2]) < (10, 6):
                 raise unittest.SkipTest("getgroups(2) is broken prior to 10.6")
 
-        # 'id -G' and 'os.getgroups()' should return the same
+        # '/usr/bin/id -G' and 'os.getgroups()' should return the same
         # groups, ignoring order, duplicates, and the effective gid.
         # #10822/#26944 - It is implementation defined whether
         # posix.getgroups() includes the effective gid.
diff --git a/Makefile.pre.in b/Makefile.pre.in
index b356f62..2a6388a 100644
--- a/Makefile.pre.in
+++ b/Makefile.pre.in
@@ -210,9 +210,10 @@ LIBMPDEC_A= Modules/_decimal/libmpdec/libmpdec.a
 LIBEXPAT_A= Modules/expat/libexpat.a
 
 # OpenSSL options for setup.py so sysconfig can pick up AC_SUBST() vars.
-OPENSSL_INCLUDES=@OPENSSL_INCLUDES@
-OPENSSL_LIBS=@OPENSSL_LIBS@
-OPENSSL_LDFLAGS=@OPENSSL_LDFLAGS@
+OPENSSL=__openssl_install_dir__
+OPENSSL_INCLUDES=-I$(OPENSSL)/include
+OPENSSL_LIBS=-L$(OPENSSL)/lib
+OPENSSL_LDFLAGS=
 OPENSSL_RPATH=@OPENSSL_RPATH@
 
 # Module state, compiler flags and linker flags
diff --git a/Modules/Setup b/Modules/Setup
index d3647ec..0791668 100644
--- a/Modules/Setup
+++ b/Modules/Setup
@@ -205,15 +205,22 @@ PYTHONPATH=$(COREPYTHONPATH)
 #_gdbm _gdbmmodule.c -lgdbm
 #_lzma _lzmamodule.c -llzma
 #_uuid _uuidmodule.c -luuid
-#zlib  zlibmodule.c -lz
+
+zlib zlibmodule.c \
+    -I__zlib_install_dir__/include \
+    -L__zlib_install_dir__/lib \
+    -lz
 
 # The readline module also supports libeditline (-leditline).
 # Some systems may require -ltermcap or -ltermlib.
-#readline readline.c -lreadline -ltermcap
+readline readline.c \
+    -I__readline_install_dir__/include \
+    -L__readline_install_dir__/lib \
+    -lreadline -ltermcap
 
 # OpenSSL bindings
-#_ssl _ssl.c $(OPENSSL_INCLUDES) $(OPENSSL_LDFLAGS) $(OPENSSL_LIBS)
-#_hashlib _hashopenssl.c $(OPENSSL_INCLUDES) $(OPENSSL_LDFLAGS) -lcrypto
+_ssl _ssl.c $(OPENSSL_INCLUDES) $(OPENSSL_LDFLAGS) $(OPENSSL_LIBS) -lssl -lcrypto
+_hashlib _hashopenssl.c $(OPENSSL_INCLUDES) $(OPENSSL_LDFLAGS) -lcrypto
 
 # To statically link OpenSSL:
 # _ssl _ssl.c $(OPENSSL_INCLUDES) $(OPENSSL_LDFLAGS) \
@@ -234,7 +241,10 @@ PYTHONPATH=$(COREPYTHONPATH)
 # every system.
 
 # *** Always uncomment this (leave the leading underscore in!):
-#_tkinter _tkinter.c tkappinit.c -DWITH_APPINIT $(TCLTK_INCLUDES) $(TCLTK_LIBS) \
+_tkinter _tkinter.c tkappinit.c -DWITH_APPINIT \
+    -L__tcl_tk_install_dir__/lib \
+    -I__tcl_tk_install_dir__/include \
+    -ltk8.6 -ltcl8.6
 # *** Uncomment and edit to reflect where your Tcl/Tk libraries are:
 #	-L/usr/local/lib \
 # *** Uncomment and edit to reflect where your Tcl/Tk headers are:
diff --git a/Modules/getaddrinfo.c b/Modules/getaddrinfo.c
index 0b4620e..9405328 100644
--- a/Modules/getaddrinfo.c
+++ b/Modules/getaddrinfo.c
@@ -43,6 +43,7 @@
 #include <sys/param.h>
 #include <sys/sysctl.h>
 #include <sys/socket.h>
+#define __APPLE_USE_RFC_3542 1
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <arpa/nameser.h>
diff --git a/Modules/getnameinfo.c b/Modules/getnameinfo.c
index 335021f..b2c2e4a 100644
--- a/Modules/getnameinfo.c
+++ b/Modules/getnameinfo.c
@@ -37,6 +37,7 @@
 #if 0
 #include <sys/types.h>
 #include <sys/socket.h>
+#define __APPLE_USE_RFC_3542 1
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <arpa/nameser.h>
diff --git a/Modules/socketmodule.c b/Modules/socketmodule.c
index 14af496..69a8858 100644
--- a/Modules/socketmodule.c
+++ b/Modules/socketmodule.c
@@ -219,6 +219,7 @@ shutdown(how) -- shut down traffic in one or both directions\n\
 #undef _XOPEN_SOURCE
 #include <sys/socket.h>
 #include <sys/types.h>
+#define __APPLE_USE_RFC_3542 1
 #include <netinet/in.h>
 #ifdef _SS_ALIGNSIZE
 #define HAVE_GETADDRINFO 1
diff --git a/Modules/socketmodule.h b/Modules/socketmodule.h
index 1b35b11..61bc720 100644
--- a/Modules/socketmodule.h
+++ b/Modules/socketmodule.h
@@ -7,6 +7,7 @@
 # else
 #   include <sys/socket.h>
 # endif
+#define __APPLE_USE_RFC_3542 1
 # include <netinet/in.h>
 # include <netinet/tcp.h>
 
diff --git a/setup.py b/setup.py
index 15d0d45..7ad963e 100644
--- a/setup.py
+++ b/setup.py
@@ -1468,12 +1468,85 @@ class PyBuildExt(build_ext):
 
     def detect_decimal(self):
         # Stefan Krah's _decimal module
+
+        # Taken from Python 3.10 setup.py
+        if '--with-system-libmpdec' in sysconfig.get_config_var("CONFIG_ARGS"):
+            include_dirs = []
+            libraries = ['mpdec']
+            sources = ['_decimal/_decimal.c']
+            depends = ['_decimal/docstrings.h']
+        else:
+            include_dirs = [os.path.abspath(os.path.join(self.srcdir, 'Modules', '_decimal', 'libmpdec'))]
+            libraries = ['m']
+            sources = [
+              '_decimal/_decimal.c',
+              '_decimal/libmpdec/basearith.c',
+              '_decimal/libmpdec/constants.c',
+              '_decimal/libmpdec/context.c',
+              '_decimal/libmpdec/convolute.c',
+              '_decimal/libmpdec/crt.c',
+              '_decimal/libmpdec/difradix2.c',
+              '_decimal/libmpdec/fnt.c',
+              '_decimal/libmpdec/fourstep.c',
+              '_decimal/libmpdec/io.c',
+              '_decimal/libmpdec/mpalloc.c',
+              '_decimal/libmpdec/mpdecimal.c',
+              '_decimal/libmpdec/numbertheory.c',
+              '_decimal/libmpdec/sixstep.c',
+              '_decimal/libmpdec/transpose.c',
+            ]
+            depends = [
+              '_decimal/docstrings.h',
+              '_decimal/libmpdec/basearith.h',
+              '_decimal/libmpdec/bits.h',
+              '_decimal/libmpdec/constants.h',
+              '_decimal/libmpdec/convolute.h',
+              '_decimal/libmpdec/crt.h',
+              '_decimal/libmpdec/difradix2.h',
+              '_decimal/libmpdec/fnt.h',
+              '_decimal/libmpdec/fourstep.h',
+              '_decimal/libmpdec/io.h',
+              '_decimal/libmpdec/mpalloc.h',
+              '_decimal/libmpdec/mpdecimal.h',
+              '_decimal/libmpdec/numbertheory.h',
+              '_decimal/libmpdec/sixstep.h',
+              '_decimal/libmpdec/transpose.h',
+              '_decimal/libmpdec/typearith.h',
+              '_decimal/libmpdec/umodarith.h',
+            ]
+
+        # Taken from Python 3.10 setup.py
+        config = {
+          'x64':     [('CONFIG_64','1'), ('ASM','1')],
+          'uint128': [('CONFIG_64','1'), ('ANSI','1'), ('HAVE_UINT128_T','1')],
+          'ansi64':  [('CONFIG_64','1'), ('ANSI','1')],
+          'ppro':    [('CONFIG_32','1'), ('PPRO','1'), ('ASM','1')],
+          'ansi32':  [('CONFIG_32','1'), ('ANSI','1')],
+          'ansi-legacy': [('CONFIG_32','1'), ('ANSI','1'), ('LEGACY_COMPILER','1')],
+          'universal':   [('UNIVERSAL','1')]
+        }
+
+        # Taken from Python 3.10 setup.py, but only the 'if' and 'elif' part
+        machine = os.environ.get('PYTHON_DECIMAL_WITH_MACHINE')
+        if machine:
+            # Override automatic configuration to facilitate testing.
+            define_macros = config[machine]
+        elif MACOS:
+            # Universal here means: build with the same options Python was built with.
+            define_macros = config['universal']
+        else:
+            raise DistutilsError("_decimal: unsupported architecture -- only macOs is supported")
+
         self.addext(
             Extension(
                 '_decimal',
-                ['_decimal/_decimal.c'],
-                # Uncomment for extra functionality:
-                # define_macros=[('EXTRA_FUNCTIONALITY', 1)]
+                include_dirs=include_dirs,
+                libraries=libraries,
+                define_macros=define_macros,
+                undef_macros=[],
+                extra_compile_args=[],
+                sources=sources,
+                depends=depends
             )
         )
 
-- 
2.39.0

